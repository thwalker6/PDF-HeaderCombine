from fpdf import FPDF
from PyPDF2 import PdfFileReader
import PyPDF2
from pprint import pprint
import os
import csv

class PDF(FPDF):

    def header(self):
        
        self.set_font('Arial', '', 10)

        #get width of PDF
        w_pt = {}
        w_pt = self.pages[self.page_no()]['w_pt']
        
        #determine placement of header 
        cellR = w_pt-(w_pt/6)
        self.cell(cellR)


        self.cell(0, 10, page_traits().get_title().title(), 0, 0, 'L')
        self.ln(10)
        self.cell(cellR)
        fName = page_traits().get_link()
        #only include sheet number if it has more than one page
        print (fName)
        if 'memo' not in fName.lower() and 'toc' not in fName.lower():
            if PdfFileReader(open(fName, 'rb')).getNumPages() > 1 :
                self.cell(0, 10, 'Sheet %s' %self.page_added  , 0, 1, 'L')
    def footer(self):
        self.set_y(-15)
        w_pt = {}
        w_pt = self.pages[self.page_no()]['w_pt']
        cellR=w_pt-(w_pt/6)
        self.cell(cellR)
        
        # set the font, I=italic
        self.set_font("Arial", "", size=8)
 
        # display the page number and center it
        pageNum = "%s" % self.page_no()
        self.cell(0, 10, pageNum, align="C")
        
        
        
class page_traits():
    
    def get_link(self):
        return 'C:\\Users\\u41007\\Desktop\\python\\Exhibit 10-C fdfd.pdf'
        
    def get_title(self):
        pdf_Name = page_traits().get_link()
        x = 0
        z = 7
        if 'toc' in pdf_Name.lower() or 'memo' in pdf_Name.lower():
            return ""
        while x <= len(pdf_Name) and pdf_Name[x:z+x] != 'Exhibit':
            x= x+1

        try: 
            if pdf_Name[x:z+x+3:][-1] != '-':
                int(pdf_Name[x:z+x+3:][-1])
                y = x+3
            else:
                y = x+4
        except ValueError:
            y = x+2
        if pdf_Name[x:z+y+1][-1] == '-':
            y = y +2
            
        return pdf_Name[x:z+y]

    def total_pages(self, input1):
        return input1.getNumPages()
    
    def get_dimensions(self, input1):
        page_dimensions = {}
        pages =[]
        pageNum = page_traits().total_pages(input1)
        print(pageNum)
        for x in range(pageNum):
            box1=(input1.getPage(x).mediaBox)
            
            
            if box1[2] >= box1[3]:
                x_co= int(box1[2])
                y_co = int(box1[3])
                ori = 'P'
            else:
                x_co = int(box1[3])
                y_co = int(box1[2])
                ori= 'L'
            page_dimensions = {'page':x, 'x': x_co, 'y': y_co, 'o': ori}
            pages.append(page_dimensions)
        return pages
    

#output
class Out_The_PDF():
    def out_file_names(self):
        overlay = 'C:\\Users\\u41007\\Desktop\\python\\overlay.pdf'
        oFileName = 'C:\\Users\\u41007\\Desktop\\python\\CAU Package.pdf'
        return (overlay, oFileName)
    def remove_overlay(self, overlay):
        os.remove(overlay)



file_name = 'C:\\Users\\u41007\\Desktop\\python\\input.csv'
mycsv = csv.reader(open(file_name))
for row in mycsv:
    print(row)



    oPDF = Out_The_PDF().out_file_names()[0]
   
    input1 = PdfFileReader(open(page_traits().get_link(), 'rb'))

    pages=[]
    pages = page_traits().get_dimensions(input1)

    pdf = PDF('L', 'pt', (pages[0]['x'],pages[0]['y']))

    '''add blank pages to overlay'''
    for x in range(input1.getNumPages()):
        #Modified the add_page to allow page added for page number of sheet
        pdf.add_page(orientation=pages[x]['o'], format=(pages[x]['x'], pages[x]['y']), same = False, page_added = x+1)
    pdf.output(oPDF, 'F')


    '''Merge the pages '''
    pdfFirst = input1.getPage(0)
    headers = PyPDF2.PdfFileReader(open(oPDF, 'rb'))
    pdfWriter = PyPDF2.PdfFileWriter()
    pdfFirst.mergePage(headers.getPage(0))
    pdfWriter.addPage(pdfFirst)

    for pageNum in range(1, input1.numPages):
        pageObj = input1.getPage(pageNum)
        pageObj.mergePage(headers.getPage(pageNum))
        pdfWriter.addPage(pageObj)


    resultPdfFile = open(Out_The_PDF().out_file_names()[1], 'wb')
    pdfWriter.write(resultPdfFile)
    resultPdfFile.close()

