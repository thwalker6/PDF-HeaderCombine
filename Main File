from PyPDF2 import PdfFileMerger, PdfFileReader
from fpdf import FPDF
import PyPDF2
import os

class PDF(FPDF):

    def header(self):
        font_size = 8
        
        

        self.set_font('Arial', '', font_size)
        #get dimensions and orientation of PDF
        w_pt = self.pages[self.page_no()]['w_pt']
        h_pt = self.pages[self.page_no()]['h_pt']
        ori = self.getOrientation(w_pt, h_pt)

        #determine placement of header 

        cellR = self.placement(self.page_no, w_pt, ori)
        self.cell(cellR)
        fName = self.pg_Name
        #only include sheet number if it has more than one page not TOC or memo
        if 'memo' not in fName.lower() and 'toc' not in fName.lower() and 'rename' not in fName.lower():

            self.cell(0, font_size, fName.title(), 0, 0, 'L')
            #add sheet number if needed
            if self.mx_Page > 1 :
                self.ln(font_size)
                self.cell(cellR)
                self.cell(0, font_size, 'Sheet %s' %self.page_added  , 0, 0, 'L')
                                
    def footer(self):
        #sets to bottom and get dimensions
        self.set_y(-15)
        w_pt = self.pages[self.page_no()]['w_pt']
        h_pt = self.pages[self.page_no()]['h_pt']
        ori = self.getOrientation(w_pt, h_pt)
        cellR = self.placement(self.page_no, w_pt, ori)
        self.cell(cellR)
        

        self.set_font("Arial", "", size=8)
 
        # display the page number and center it
        pageNum = "Page %s" % self.page_no()
        self.cell(0, 10, pageNum, 0,1, align="L")
        
    def placement(self, page_no, w_pt, ori):
        #if page is landscape or on even pages placement of words changes a bit
        if page_no() % 2 == 1 and ori == "P":
            cellR = w_pt-(w_pt/6)
        else:
            cellR = w_pt-(w_pt/6)
            #cellR = (w_pt/12)
        return cellR
        
    def getOrientation(self,w_pt, h_pt):
        if h_pt >= w_pt:
            return "P"
        else:
            return "L"
    

def tempFolder():
    directory = 'C:\\Temp'
    if not os.path.exists(directory):
        os.makedirs(directory)
    return(directory)
class page_traits():
    

    def get_title(pdf_Name):
        
        x = 0
        z = 7
        #returns memo if it is memo or TOC since they aren't needed
        if 'toc' in pdf_Name.lower():
            return 'TOC'
        elif 'memo' in pdf_Name.lower() or pdf_Name == '':
            return "Memo"
        elif 'exhibit' not in pdf_Name.lower():
            return "Does not have exhibit in the name.  Please rename"
        #finds the word exhibit 
        while x <= len(pdf_Name) and pdf_Name[x:z+x] != 'Exhibit':
            x= x+1

        try: 
            #convuluted way of finding the end of the exhibit number stuff
            #will checks to find numbers in there
            if pdf_Name[x:z+x+3:][-1] != '-':
                int(pdf_Name[x:z+x+3:][-1])
                y = x+3
            else:
                y = x+4
        except ValueError:
            y = x+2
        if pdf_Name[x:z+y+1][-1] == '-':
            y = y +2
            
        return pdf_Name[x:z+y]

    def total_pages(pdfFile):
        #total pages a-doy
        return pdfFile.getNumPages()
    
    def get_traits(pdfFile, pdf =''):
        #gets dimensions and orientation and exhibit name page numbers etc.
        page_d = {}
        pages =[]

        pageNum = page_traits.total_pages(pdfFile)

        for x in range( pageNum):
            #box1 has all the characteristics of the PDF
            box1=(pdfFile.getPage(x).mediaBox)

            #finds out orientation
            if box1[2] >= box1[3]:
                x_co= int(box1[2])
                y_co = int(box1[3])
                ori = 'P'
            else:
                x_co = int(box1[3])
                y_co = int(box1[2])
                ori= 'L'
            
            pgCount = page_traits.total_pages(pdfFile)
            exName = page_traits.get_title(pdf)
            page_d = {'page':x+1, 'x': x_co, 'y': y_co, 'o': ori, 'pg_Count': pgCount, 'exName': exName}
            pages.append(page_d)

        return pages
    


class Run_This():

    def __init__(self, listN, destination, package_name):
        self.listN = listN
        self.destination = destination
        self.package_name = package_name
    
    def run_prog(self):
        merger = PdfFileMerger()
        tempDirectory = tempFolder()
        exhibitNames = []
        page_dimensions = []
        page_count = []
        #list of files to be combined
        
        pdfs = self.listN

        #merges the PDFs together
        for pdfz in pdfs:
            input1 = PdfFileReader(open(pdfz , 'rb'))
            page_dimensions.append(page_traits.get_traits(input1, pdfz))

            merger.append(open(pdfz, 'rb'))

        #gets characteristics fo the PDFS, stores them in list/dictionaries
        allPageChar = []
        for x in range(len(page_dimensions)):
            for y in range(len(page_dimensions[x])):
                allPageChar.append(page_dimensions[x][y])



        #finishes the merge
        with open(tempDirectory +'\\result.pdf', 'wb') as fout:
            merger.write(fout)

        input2 = PdfFileReader(open(tempDirectory +'\\result.pdf', 'rb'))

        #starts the blank pages for headers

        pdf = PDF('L', 'pt', (page_dimensions[0][0]['x'],page_dimensions[0][0]['y']))
 

        pages=[]
        exName = []

        #applies all the pages characteristics to the pages list
        for x in range(len(allPageChar)):
            pages.append(allPageChar[x])


        for x in range(len(allPageChar)):
            #Modified the add_page to allow page added for page number of sheet

            pdf.add_page(orientation=pages[x]['o'], format=(pages[x]['x'], pages[x]['y']), same = False, page_added = pages[x]['page'], pg_Name = pages[x]['exName'], mx_Page = pages[x]['pg_Count'])
        #header file name
        oPDF = tempDirectory +'\\overlay.pdf'

        pdf.output(oPDF, 'F')


        pdfFirst = input2.getPage(0)
        headers = PyPDF2.PdfFileReader(open(oPDF, 'rb'))
        pdfWriter = PyPDF2.PdfFileWriter()
        pdfFirst.mergePage(headers.getPage(0))
        pdfWriter.addPage(pdfFirst)


        for pageNum in range(1, input2.numPages):

            pageObj = input2.getPage(pageNum)
            pageObj.mergePage(headers.getPage(pageNum))
            pdfWriter.addPage(pageObj)

        address = self.destination + '\\' + self.package_name + '.pdf'
        resultPdfFile = open(address, 'wb')
        pdfWriter.write(resultPdfFile)
        resultPdfFile.close()
        os.startfile(address)

