from PyPDF2 import PdfFileMerger, PdfFileReader
from fpdf import FPDF
import PyPDF2
import os

class PDF(FPDF):

    def header(self):
        font_size = 8
        
        self.set_font('helvetica', '', font_size)
        #get dimensions and orientation of PDF
        self.ori = self.getOrientation()

        #determine placement of header 
       
        cellR = self.placement()
        self.cell(cellR)
        fName = self.pg_Name

        #only include sheet number if it has more than one page not TOC or memo
        if 'memo' not in fName.lower() and 'toc' not in fName.lower() and 'rename' not in fName.lower():
            self.cell(0, font_size, fName.title(), 0, 0, 'L')
            #add sheet number if needed
            if self.mx_Page > 1 :
                
                self.ln(font_size)
                self.cell(cellR)
                self.cell(0, font_size, 'Sheet %s' %self.page_added  , 0, 0, 'L')
                                
    def footer(self):
        #sets to bottom and get dimensions
        #Filing package does not get page numbers
        if self.package_type == 'Filing':
            return
        '''After a header is added add_page resets the x value causing it to reset certain values.
          Just need to reestablish the points to fix'''
        self.w_pt = self.pages[self.page_no()]['w_pt']
        self.h_pt = self.pages[self.page_no()]['h_pt'] 
        self.ori = self.getOrientation()
        self.set_y(-15)

        #place the cell
        cellR = self.placement()
        self.cell(cellR)
  
        self.set_font("helvetica", "", size=8)
 
        # display the page number and center it
        pageNum = "Page %s" % self.page_no()

        self.cell(0, 10, pageNum, 0,1, align="L")

    def add_traits(self, pg_Name, mx_Page, page_added, w_pt, h_pt, ori):
        #add additional traits to the object
        self.pg_Name = pg_Name
        self.mx_Page = mx_Page
        self.page_added = page_added
        self.w_pt = w_pt
        self.h_pt = h_pt
        self.ori = ori
        
    def placement(self):
        #if page is landscape or on even pages placement of words changes a bit
        if self.page_no() % 2 == 1 and self.ori == "P":
            cellR = self.w_pt-(self.w_pt/6)
        else:
            cellR = self.w_pt-(self.w_pt/6)
            #cellR = (w_pt/12)
        return cellR
        
    def getOrientation(self):
        if self.h_pt >= self.w_pt:
            return "P"
        else:
            return "L"
    

def tempFolder():
    directory = 'C:\\Temp'
    if not os.path.exists(directory):
        os.makedirs(directory)
    return(directory)
    
class page_traits():
    
    def __init__(self, pdfFile, pdf):
        self.pdfFile = pdfFile
        self.pdf = pdf
        
    def get_title(pdf_Name):
        
        x = 0
        z = 7
        #returns memo if it is memo or TOC since they aren't needed
        if 'toc' in pdf_Name.lower():
            return 'TOC'
        elif 'memo' in pdf_Name.lower() or pdf_Name == '':
            return "Memo"
        elif 'exhibit' not in pdf_Name.lower():
            return "Does not have exhibit in the name.  Please rename"
        #finds the word exhibit 
        while x <= len(pdf_Name) and pdf_Name[x:z+x] != 'Exhibit':
            x= x+1

        try: 
            #convuluted way of finding the end of the exhibit number stuff
            #will checks to find numbers in there
            if pdf_Name[x:z+x+3:][-1] != '-':
                int(pdf_Name[x:z+x+3:][-1])
                y = x+3
            else:
                y = x+4
        except ValueError:
            y = x+2
        if pdf_Name[x:z+y+1][-1] == '-':
            y = y +2
            
        return pdf_Name[x:z+y]

    def get_traits(self):
        #gets dimensions and orientation and exhibit name page numbers etc.
        page_d = {}
        pages =[]

        pgCount = self.pdfFile.getNumPages()

        for x in range(pgCount):
            #box1 has all the characteristics of the PDF
            box1=(self.pdfFile.getPage(x).mediaBox)

            #finds out orientation
            if box1[2] >= box1[3]:
                x_co= int(box1[2])
                y_co = int(box1[3])
                ori = 'P'
            else:
                x_co = int(box1[3])
                y_co = int(box1[2])
                ori= 'L'
            

            exName = page_traits.get_title(self.pdf)
            page_d = {'page':x+1, 'x': x_co, 'y': y_co, 'o': ori, 'pg_Count': pgCount, 'exName': exName}
            pages.append(page_d)

        return pages
    


class Run_This():

    def __init__(self, listN, destination, package_name, package_type):
        self.listN = listN
        self.destination = destination
        self.package_name = package_name
        self.package_type = package_type

    def run_prog(self):
        merger = PdfFileMerger()
        tempDirectory = tempFolder()
        exhibitNames = []
        page_dimensions = []
        page_count = []
        
        #list of files to be combined

        if self.package_type != 'Filing':
            pdfs = []
            pdfs = self.listN
        else:
            pdfs = self.listN

        #merges the PDFs together
        if self.package_type != 'Filing':
            for pdfz in pdfs:
                input1 = PdfFileReader(open(pdfz , 'rb'))
                x = page_traits(input1, pdfz)
                page_dimensions.append(x.get_traits())
                merger.append(open(x.pdf, 'rb'))
                
        else:
            input1 = PdfFileReader(open(pdfs, 'rb'))
            x = page_traits(input1, pdfs)
            page_dimensions.append(x.get_traits())
            merger.append(open(x.pdf, 'rb'))

        #gets characteristics fo the PDFS, stores them in list/dictionaries
        allPageChar = []
        for x in range(len(page_dimensions)):
            for y in range(len(page_dimensions[x])):
                allPageChar.append(page_dimensions[x][y])



        #finishes the merge
        with open(tempDirectory +'\\result.pdf', 'wb') as fout:
            merger.write(fout)

        input2 = PdfFileReader(open(tempDirectory +'\\result.pdf', 'rb'))

        #starts the blank pages for headers
        
        pdf = PDF('L', 'pt', (page_dimensions[0][0]['x'],page_dimensions[0][0]['y']))
        pdf.package_type = self.package_type

        pages=[]
        exName = []

        #applies all the pages characteristics to the pages list
        for x in range(len(allPageChar)):
            pages.append(allPageChar[x])


        for x in range(len(allPageChar)):
            #Modified the add_page to allow page added for page number of sheet
            pdf.add_traits(pages[x]['exName'],pages[x]['pg_Count'],pages[x]['page'], pages[x]['x'], pages[x]['y'], pages[x]['o'])
            pdf.add_page(pdf.ori, format=(pdf.w_pt, pdf.h_pt), same = False)
        #header file name
        
        oPDF = tempDirectory +'\\overlay.pdf'
        pdf.output(oPDF, 'F')
        
        headers = PyPDF2.PdfFileReader(open(oPDF, 'rb'))
        pdfWriter = PyPDF2.PdfFileWriter()
        '''pdfFirst = input2.getPage(0)
        
        pdfWriter = PyPDF2.PdfFileWriter()
        pdfFirst.mergePage(headers.getPage(0))
        pdfWriter.addPage(pdfFirst)'''
        


        for pageNum in range(0, input2.numPages):
            pageObj = input2.getPage(pageNum)
            pageObj.mergePage(headers.getPage(pageNum))
            pdfWriter.addPage(pageObj)

        address = self.destination + '\\' + self.package_name + '.pdf'
        resultPdfFile = open(address, 'wb')
        pdfWriter.write(resultPdfFile)
        resultPdfFile.close()
        os.startfile(address)

